'use strict';

require('path');
require('hable');
require('signal-exit');
require('os');
require('child_process');
require('tree-kill');
const index$1 = require('./tib-index.js');
require('vue-template-compiler');
require('./tib-webpage.js');
require('crypto');
require('fs');
require('util');
require('glob');
require('webpack');
require('@babel/core');
require('@babel/parser');
require('http');
require('./tib-index3.js');
require('./tib-logging.js');
const index = require('./tib-index2.js');

class BrowserStackLocalBrowser extends index['default'] {
  constructor(config) {
    super(config);

    // https://www.browserstack.com/local-testing#modifiers
    this.localConfig = {
      start: true,
      stop: true,
      key: this.getConfigProperty('key'),
      folder: this.config.folder,
      ...this.config.BrowserStackLocal
    };

    if (this.localConfig.start || typeof this.localConfig.start === 'undefined') {
      this.hook('start:before', () => index$1.BrowserStackLocal.start(this.localConfig));
    }

    if (this.localConfig.stop || typeof this.localConfig.stop === 'undefined') {
      this.hook('close:after', () => index$1.BrowserStackLocal.stop());
    }
  }

  async _loadDependencies() {
    super._loadDependencies();

    if (this.localConfig.start || typeof this.localConfig.start === 'undefined') {
      await index$1.BrowserStackLocal.loadDriver();
    }
  }

  async _start(capabilities = {}) {
    this.addCapability('browserstack.local', true);

    await super._start(capabilities);
  }

  getLocalFolderUrl(path = '/') {
    return `http://${this.getConfigProperty('user')}.browserstack.com${path}`
  }

  getUrl(path) {
    return this.getLocalFolderUrl(path)
  }
}

exports.default = BrowserStackLocalBrowser;
