'use strict';

require('path');
require('hable');
require('signal-exit');
require('os');
require('child_process');
require('tree-kill');
const index$1 = require('./tib-index.js');
require('vue-template-compiler');
require('./tib-webpage.js');
require('crypto');
require('fs');
require('util');
require('glob');
require('webpack');
require('@babel/core');
require('@babel/parser');
require('http');
const index = require('./tib-index3.js');
const logging = require('./tib-logging.js');
const chrome = require('./tib-chrome.js');

class ChromeSeleniumBrowser extends logging.SeleniumLogging(index['default']) {
  constructor(config) {
    super(config);

    this.setBrowser('chrome');

    this.hook('selenium:build:before', async (builder) => {
      let path = process.env.CHROME_EXECUTABLE_PATH;

      if (!path) {
        path = new chrome.ChromeDetector().detect();
      }

      if (!path) {
        throw new index$1.BrowserError(this, 'Could not find Chrome executable path')
      }

      const configArguments = [
        'no-sandbox',
        'disable-setuid-sandbox',
        ...this.config.browserArguments
      ];

      const options = new ChromeSeleniumBrowser.Options();
      options.setChromeBinaryPath(path);
      options.addArguments(...configArguments);

      await this.callHook('selenium:build:options', options, builder);

      builder.setChromeOptions(options);
    });
  }

  setHeadless() {
    super.setHeadless();
    this.config.browserArguments.push('disable-gpu');
  }

  async _loadDependencies() {
    super._loadDependencies();

    if (!ChromeSeleniumBrowser.chromedriver) {
      ChromeSeleniumBrowser.chromedriver = await this.loadDependency('chromedriver');
    }

    if (!ChromeSeleniumBrowser.Options) {
      const { Options } = await this.loadDependency('selenium-webdriver/chrome');
      ChromeSeleniumBrowser.Options = Options;
    }
  }
}

exports.default = ChromeSeleniumBrowser;
