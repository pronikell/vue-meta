'use strict';

require('path');
require('hable');
require('signal-exit');
require('os');
require('child_process');
require('tree-kill');
require('./tib-index.js');
require('vue-template-compiler');
require('./tib-webpage.js');
require('crypto');
require('fs');
require('util');
require('glob');
require('webpack');
require('@babel/core');
require('@babel/parser');
require('http');
const index = require('./tib-index3.js');
const logging = require('./tib-logging.js');

class FirefoxSeleniumBrowser extends logging.SeleniumLogging(index['default']) {
  constructor(config) {
    super(config);

    this.setBrowser('firefox');

    this.hook('selenium:build:before', async (builder) => {
      const configArguments = this.config.browserArguments;

      if (!config.xvfb && !configArguments.some(a => a.includes('headless'))) {
        configArguments.push('headless');
      }

      const options = new FirefoxSeleniumBrowser.client.Options();
      options.addArguments(...configArguments);

      if (this.config.browserConfig.window) {
        options.windowSize(this.config.browserConfig.window.width, this.config.browserConfig.window.height);
      }

      await this.callHook('selenium:build:options', options, builder);

      builder.setFirefoxOptions(options);
    });
  }

  async _loadDependencies() {
    super._loadDependencies();

    if (!FirefoxSeleniumBrowser.geckodriver) {
      FirefoxSeleniumBrowser.geckodriver = await this.loadDependency('geckodriver');
    }

    if (!FirefoxSeleniumBrowser.client) {
      FirefoxSeleniumBrowser.client = await this.loadDependency('selenium-webdriver/firefox');
    }
  }
}

exports.default = FirefoxSeleniumBrowser;
