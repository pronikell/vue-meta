{"code":"import { h, reactive, onUnmounted, Teleport, Comment, getCurrentInstance } from 'vue';\r\nimport { isArray, isFunction } from '@vue/shared';\r\nimport { createMergedObject } from './object-merge';\r\nimport { renderMeta } from './render';\r\nimport { metaActiveKey } from './symbols';\r\nimport { Metainfo } from './Metainfo';\r\nimport { defaultConfig } from './config/default';\r\nimport * as defaultResolver from './resolvers/deepest';\r\nexport const ssrAttribute = 'data-vm-ssr';\r\nexport function addVnode(isSSR, teleports, to, vnodes) {\r\n    const nodes = (isArray(vnodes) ? vnodes : [vnodes]);\r\n    if (!isSSR) {\r\n        // Comments shouldnt have any use on the client as they are not reactive anyway\r\n        nodes.forEach((vnode, idx) => {\r\n            if (vnode.type === Comment) {\r\n                nodes.splice(idx, 1);\r\n            }\r\n        });\r\n        // only add ssrAttribute's for real meta tags\r\n    }\r\n    else if (!to.endsWith('Attrs')) {\r\n        nodes.forEach((vnode) => {\r\n            if (!vnode.props) {\r\n                vnode.props = {};\r\n            }\r\n            vnode.props[ssrAttribute] = true;\r\n        });\r\n    }\r\n    if (!teleports[to]) {\r\n        teleports[to] = [];\r\n    }\r\n    teleports[to].push(...nodes);\r\n}\r\nexport const createMetaManager = (isSSR = false, config, resolver) => MetaManager.create(isSSR, config || defaultConfig, resolver || defaultResolver);\r\nexport class MetaManager {\r\n    isSSR = false;\r\n    config;\r\n    target;\r\n    resolver;\r\n    ssrCleanedUp = false;\r\n    constructor(isSSR, config, target, resolver) {\r\n        this.isSSR = isSSR;\r\n        this.config = config;\r\n        this.target = target;\r\n        if (resolver && 'setup' in resolver && isFunction(resolver.setup)) {\r\n            this.resolver = resolver;\r\n        }\r\n    }\r\n    static create = (isSSR, config, resolver) => {\r\n        const resolve = (options, contexts, active, key, pathSegments) => {\r\n            if (isFunction(resolver)) {\r\n                return resolver(options, contexts, active, key, pathSegments);\r\n            }\r\n            return resolver.resolve(options, contexts, active, key, pathSegments);\r\n        };\r\n        const active = reactive({});\r\n        const mergedObject = createMergedObject(resolve, active);\r\n        // TODO: validate resolver\r\n        const manager = new MetaManager(isSSR, config, mergedObject, resolver);\r\n        return manager;\r\n    };\r\n    install(app) {\r\n        app.component('Metainfo', Metainfo);\r\n        app.config.globalProperties.$metaManager = this;\r\n        app.provide(metaActiveKey, this.target.context.active);\r\n    }\r\n    addMeta(metadata, vm) {\r\n        if (!vm) {\r\n            vm = getCurrentInstance() || undefined;\r\n        }\r\n        const metaGuards = ({\r\n            removed: []\r\n        });\r\n        const resolveContext = { vm };\r\n        const { resolver } = this;\r\n        if (resolver && resolver.setup) {\r\n            resolver.setup(resolveContext);\r\n        }\r\n        // TODO: optimize initial compute (once)\r\n        const meta = this.target.addSource(metadata, resolveContext, true);\r\n        const onRemoved = (removeGuard) => metaGuards.removed.push(removeGuard);\r\n        const unmount = (ignoreGuards) => this.unmount(!!ignoreGuards, meta, metaGuards, vm);\r\n        if (vm) {\r\n            onUnmounted(unmount);\r\n        }\r\n        return {\r\n            meta,\r\n            onRemoved,\r\n            unmount\r\n        };\r\n    }\r\n    unmount(ignoreGuards, meta, metaGuards, vm) {\r\n        if (vm) {\r\n            const { $el } = vm.proxy;\r\n            // Wait for element to be removed from DOM\r\n            if ($el && $el.offsetParent) {\r\n                let observer = new MutationObserver((records) => {\r\n                    for (const { removedNodes } of records) {\r\n                        if (!removedNodes) {\r\n                            continue;\r\n                        }\r\n                        removedNodes.forEach((el) => {\r\n                            if (el === $el && observer) {\r\n                                observer.disconnect();\r\n                                observer = undefined;\r\n                                this.reallyUnmount(ignoreGuards, meta, metaGuards);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                observer.observe($el.parentNode, { childList: true });\r\n                return;\r\n            }\r\n        }\r\n        this.reallyUnmount(ignoreGuards, meta, metaGuards);\r\n    }\r\n    async reallyUnmount(ignoreGuards, meta, metaGuards) {\r\n        this.target.delSource(meta);\r\n        if (!ignoreGuards && metaGuards) {\r\n            await Promise.all(metaGuards.removed.map(removeGuard => removeGuard()));\r\n        }\r\n    }\r\n    render({ slots } = {}) {\r\n        const active = this.target.context.active;\r\n        // TODO: clean this method\r\n        const { isSSR } = this;\r\n        // cleanup ssr tags if not yet done\r\n        if (!isSSR && !this.ssrCleanedUp) {\r\n            this.ssrCleanedUp = true;\r\n            const cleanUpSSR = () => {\r\n                const ssrTags = document.querySelectorAll(`[${ssrAttribute}]`);\r\n                if (ssrTags && ssrTags.length) {\r\n                    ssrTags.forEach(el => el.parentNode && el.parentNode.removeChild(el));\r\n                }\r\n            };\r\n            if (document.readyState === 'loading') {\r\n                // Listen for DOM loaded because tags in the body couldnt\r\n                // have loaded yet once the manager does it first render\r\n                // (preferable there should only be one meta render on hydration)\r\n                window.addEventListener('DOMContentLoaded', cleanUpSSR, { once: true });\r\n            }\r\n            else {\r\n                cleanUpSSR();\r\n            }\r\n        }\r\n        const teleports = {};\r\n        for (const key in active) {\r\n            const config = this.config[key] || {};\r\n            let renderedNodes = renderMeta({ isSSR, metainfo: active, slots }, key, active[key], config);\r\n            if (!renderedNodes) {\r\n                continue;\r\n            }\r\n            if (!isArray(renderedNodes)) {\r\n                renderedNodes = [renderedNodes];\r\n            }\r\n            let defaultTo = key !== 'base' && active[key].to;\r\n            if (!defaultTo && 'to' in config) {\r\n                defaultTo = config.to;\r\n            }\r\n            if (!defaultTo && 'attributesFor' in config) {\r\n                defaultTo = key;\r\n            }\r\n            for (const { to, vnode } of renderedNodes) {\r\n                addVnode(this.isSSR, teleports, to || defaultTo || 'head', vnode);\r\n            }\r\n        }\r\n        if (slots) {\r\n            for (const slotName in slots) {\r\n                const tagName = slotName === 'default' ? 'head' : slotName;\r\n                // Only teleport the contents of head/body slots\r\n                if (tagName !== 'head' && tagName !== 'body') {\r\n                    continue;\r\n                }\r\n                const slot = slots[slotName];\r\n                if (isFunction(slot)) {\r\n                    addVnode(this.isSSR, teleports, tagName, slot({ metainfo: active }));\r\n                }\r\n            }\r\n        }\r\n        return Object.keys(teleports).map((to) => {\r\n            const teleport = teleports[to];\r\n            return h(Teleport, { to }, teleport);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=manager.js.map","references":["/tmp/b/vue-meta/node_modules/vue/dist/vue.d.ts","/tmp/b/vue-meta/node_modules/@vue/shared/dist/shared.d.ts","/tmp/b/vue-meta/node_modules/vue/dist/vue.d.ts","/tmp/b/vue-meta/src/object-merge/index.ts","/tmp/b/vue-meta/src/render.ts","/tmp/b/vue-meta/src/symbols.ts","/tmp/b/vue-meta/src/Metainfo.ts","/tmp/b/vue-meta/src/config/default.ts","/tmp/b/vue-meta/src/resolvers/deepest.ts","/tmp/b/vue-meta/src/object-merge/index.ts","/tmp/b/vue-meta/src/types/index.ts"],"map":"{\"version\":3,\"file\":\"manager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/manager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
