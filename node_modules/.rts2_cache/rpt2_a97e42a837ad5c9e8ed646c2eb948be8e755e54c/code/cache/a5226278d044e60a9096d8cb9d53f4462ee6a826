{"code":"export * from './config';\r\n//# sourceMappingURL=index.js.map","references":["/tmp/b/vue-meta/node_modules/vue/dist/vue.d.ts","/tmp/b/vue-meta/src/object-merge/index.ts","/tmp/b/vue-meta/src/manager.ts","/tmp/b/vue-meta/src/types/options.ts","/tmp/b/vue-meta/src/types/config.ts","/tmp/b/vue-meta/node_modules/@vue/runtime-core/dist/runtime-core.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/index.ts\"],\"names\":[],\"mappings\":\"AAKA,cAAc,UAAU,CAAA\"}","dtsmap":{"name":"/tmp/b/vue-meta/node_modules/.rts2_cache/placeholder/src/types/index.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/index.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"/tmp/b/vue-meta/node_modules/.rts2_cache/placeholder/src/types/index.d.ts","writeByteOrderMark":false,"text":"import type { VNode, Slots, ComponentInternalInstance } from 'vue';\r\nimport type { MergedObject, ResolveContext, ResolveMethod } from '../object-merge';\r\nimport type { MetaManager } from '../manager';\r\nimport { ComponentOptionsMetaInfo } from './options';\r\nexport * from './config';\r\nexport declare type Modify<T, R> = Omit<T, keyof R> & R;\r\nexport declare type Truthy<T> = T extends undefined | void | null | false | 0 | '' ? never : T;\r\nexport declare type ExcludesFalsy = <T>(x: T) => x is Truthy<T>;\r\nexport declare type TODO = any;\r\n/**\r\n * Proxied meta source for tracking changes and updating the active meta daa\r\n */\r\nexport interface MetaSourceProxy extends MergedObject {\r\n}\r\n/**\r\n * Metainfo data source input by the user through the useMeta fn\r\n */\r\nexport declare type MetaSource = {\r\n    [key: string]: TODO;\r\n};\r\nexport declare type MetaGuardRemoved = () => void | Promise<void>;\r\n/**\r\n * Return value of the useMeta api\r\n */\r\nexport declare type MetaProxy = {\r\n    meta: MetaSourceProxy;\r\n    onRemoved: (removeGuard: MetaGuardRemoved) => void;\r\n    unmount: (ignoreGuards?: boolean) => void;\r\n};\r\n/**\r\n * The active/aggregated meta data currently rendered\r\n */\r\nexport interface MetaActive {\r\n    [key: string]: TODO;\r\n}\r\n/**\r\n * Context passed to the meta resolvers\r\n */\r\nexport declare type MetaResolveContext = ResolveContext & {\r\n    vm?: ComponentInternalInstance;\r\n};\r\nexport declare type MetaResolveSetup = (context: MetaResolveContext) => void;\r\nexport declare type MetaResolver = {\r\n    setup?: MetaResolveSetup;\r\n    resolve: ResolveMethod;\r\n};\r\nexport declare type MetaResolverSetup = Required<MetaResolver>;\r\n/**\r\n * @internal\r\n */\r\nexport declare type MetaTeleports = {\r\n    [key: string]: Array<VNode>;\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport interface MetaGuards {\r\n    removed: Array<MetaGuardRemoved>;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport interface MetaRenderContext {\r\n    isSSR: boolean;\r\n    metainfo: MetaActive;\r\n    slots?: Slots;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport interface MetaGroupConfig {\r\n    group: string;\r\n    data: Array<TODO> | TODO;\r\n    tagNamespace?: string;\r\n    fullName?: string;\r\n    slotName?: string;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport interface SlotScopeProperties {\r\n    content: string;\r\n    metainfo: MetaActive;\r\n    [key: string]: any;\r\n}\r\n/**\r\n * @internal\r\n */\r\nexport declare type MetaRenderedNode = {\r\n    vnode: VNode;\r\n    to?: string;\r\n};\r\n/**\r\n * @internal\r\n */\r\nexport declare type MetaRendered = Array<MetaRenderedNode>;\r\ndeclare module '@vue/runtime-core' {\r\n    interface ComponentInternalInstance {\r\n        $metaManager: MetaManager;\r\n        $metaGuards: MetaGuards;\r\n    }\r\n    interface ComponentCustomOptions {\r\n        metaInfo?: ComponentOptionsMetaInfo;\r\n    }\r\n}\r\n//# sourceMappingURL=index.d.ts.map"}}
