{"code":"export const resolveOption = (predicament, initialValue) => (options, contexts) => {\r\n    let resolvedIndex = -1;\r\n    contexts.reduce((acc, context, index) => {\r\n        const retval = predicament(acc, context);\r\n        if (retval !== acc) {\r\n            resolvedIndex = index;\r\n            return retval;\r\n        }\r\n        return acc;\r\n    }, initialValue);\r\n    if (resolvedIndex > -1) {\r\n        return options[resolvedIndex];\r\n    }\r\n};\r\n//# sourceMappingURL=index.js.map","references":["/tmp/b/vue-meta/src/object-merge/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/resolvers/index.ts\"],\"names\":[],\"mappings\":\"AAMA,MAAM,CAAC,MAAM,aAAa,GAAG,CAAwB,WAA2C,EAAE,YAAgB,EAAyB,EAAE,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE;IAClK,IAAI,aAAa,GAAG,CAAC,CAAC,CAAA;IAEtB,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QACtC,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAExC,IAAI,MAAM,KAAK,GAAG,EAAE;YAClB,aAAa,GAAG,KAAK,CAAA;YACrB,OAAO,MAAM,CAAA;SACd;QAED,OAAO,GAAG,CAAA;IACZ,CAAC,EAAE,YAAY,CAAC,CAAA;IAEhB,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC,aAAa,CAAC,CAAA;KAC9B;AACH,CAAC,CAAA\"}","dtsmap":{"name":"/tmp/b/vue-meta/node_modules/.rts2_cache/placeholder/src/resolvers/index.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/resolvers/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAEpE,MAAM,WAAW,wBAAwB,CAAC,CAAC,EAAE,CAAC;IAC5C,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAA;CAC7C;AAED,eAAO,MAAM,aAAa,6HAiBzB,CAAA\"}"},"dts":{"name":"/tmp/b/vue-meta/node_modules/.rts2_cache/placeholder/src/resolvers/index.d.ts","writeByteOrderMark":false,"text":"import type { ResolveContext, ResolveMethod } from '../object-merge';\r\nexport interface ResolveOptionPredicament<T, U> {\r\n    (currentValue: T | undefined, context: U): T;\r\n}\r\nexport declare const resolveOption: <T, U = ResolveContext>(predicament: ResolveOptionPredicament<T, U>, initialValue?: T | undefined) => ResolveMethod<any, U>;\r\n//# sourceMappingURL=index.d.ts.map"}}
